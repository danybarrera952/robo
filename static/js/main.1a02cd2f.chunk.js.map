{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/errorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","pros","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","props","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLocaleLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sNAiBeA,EAdF,SAACC,GAAU,IACZC,EAAkBD,EAAlBC,KAAKC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OAEI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACR,4BAAKL,GACO,2BAAIC,MCkCLK,EAvCE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAoBTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GAEpC,OAAO,kBAAE,EAAF,CACPC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIvB,OAEE,6BACAO,ICpBWK,EAhBI,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC7B,OAEI,kBAAC,WAAD,KACI,yBAAKZ,UAAU,OACf,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAa,eACbC,SAAYH,OCIVI,G,MAdA,SAACpB,GAGhB,OACI,yBAAKqB,MAAQ,CAACC,UAAW,SACzBC,OAAQ,kBACRC,OAAQ,UACHxB,EAAKyB,YCgBCC,E,kDApBX,WAAYC,GAAO,IAAD,8BACb,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHD,E,8DAOAC,EAAOC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAK1B,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAKL,MAAMF,a,GAlBCS,aCuDZC,E,kDAlDd,aAAc,IAAD,8BACT,gBAaDC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAClB,YAAYsB,EAAMC,OAAOC,SAd3C,EAAKX,MAAQ,CACTpB,OAAS,GACTO,YAAa,IAJR,E,gEAQQ,IAAD,OAChByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OACXA,EAASC,UACdF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACzB,OAAOoC,S,+BAO1B,IAAD,EAE0BZ,KAAKJ,MAA5BpB,EAFH,EAEGA,OAAQO,EAFX,EAEWA,YACT8B,EAAerC,EAAOsC,QAAQ,SAAAC,GAEhC,OAAOA,EAAM9C,KAAK+C,oBAAoBC,SAASlC,EAAYiC,wBAG5D,OAAIxC,EAAO0C,OAIV,kBAAC,WAAD,KACA,yBAAK9C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAYY,aAAcgB,KAAKI,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACJ,kBAAC,EAAD,CAAU5B,OAAQqC,QATR,2C,GA7BHM,IAAMjB,WCKLkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.1a02cd2f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (pros) => {\r\n    const { name,email, id} = pros;\r\n    return (\r\n        \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n    <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n/* \r\n  return (\r\n    <div>\r\n      {\r\n\r\n        robots.map( (user,i) => {\r\n          return (\r\n            <Card \r\n           key={i}\r\n          id={robots[i].id} \r\n         name={robots[i].name} \r\n         email={robots[i].email}\r\n        />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  ); */\r\n\r\n    const cardComponent = robots.map((user, i) => {\r\n    \r\n        return < Card \r\n        key={i}\r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}\r\n        />\r\n    });\r\n\r\n  return (\r\n\r\n    <div>\r\n   {cardComponent}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default CardList;","import React, { Fragment } from 'react';\r\n\r\n\r\nconst SearchBox =  ({searchfield,searchChange}) => {\r\n    return (\r\n\r\n        <Fragment>\r\n            <div className='pa2'>\r\n            <input \r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search'\r\n             placeholder ='search obots'\r\n             onChange = {searchChange}\r\n            />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (pros) => {\r\n\r\n    \r\nreturn (\r\n    <div style={ {overflowY: 'scroll', \r\n    border: '5px solid black', \r\n    height: '800px' }}>\r\n        {pros.children}\r\n    </div>\r\n);\r\n     \r\n \r\n};\r\n\r\nexport default Scroll;","import React, { Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props){\r\n         super(props);\r\n         this.state = {\r\n             hasError: false\r\n         }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n         this.setState({hasError: true});\r\n\r\n\r\n    }\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Fragment } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/errorBoundry';\r\n\r\nclass  App extends React.Component {\r\n constructor(){\r\n     super()\r\n     this.state = {\r\n         robots : [],\r\n         searchfield: ''\r\n     }\r\n }\r\n\r\n componentDidMount() {\r\n     fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(response => \r\n        response.json())\r\n  .then(users => this.setState({robots:users}));\r\n }\r\n    onSearchChange = (event) =>{\r\n\r\n        this.setState({searchfield:event.target.value})\r\n\r\n }\r\n    render(){\r\n\r\n        const {robots, searchfield} = this.state;\r\n        const filterRobots = robots.filter( robot => {\r\n         \r\n            return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n            \r\n           });\r\n           if(!robots.length){\r\n               return <h1>Loading</h1>\r\n           } else {\r\n        return (\r\n            <Fragment>\r\n            <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox  searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n            <CardList robots={filterRobots} />\r\n            </ErrorBoundry>\r\n            </Scroll>\r\n            </div>\r\n            </Fragment>\r\n        );\r\n           }\r\n    }\r\n    \r\n};\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}